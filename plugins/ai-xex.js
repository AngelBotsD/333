import axios from 'axios'
import fetch from 'node-fetch'

const apis = {
  openrouter: 'https://openrouter.ai/api/v1/chat/completions',
  luminai: 'https://luminai.my.id',
  perplexity: 'https://api.perplexity.ai/chat'
}

const keysCatboxURL = 'https://files.catbox.moe/o1hpeb.json' // Tu JSON subido

async function obtenerKeys() {
  const res = await fetch(keysCatboxURL)
  const data = await res.json()
  return data.openrouter_keys
}

const handler = async (msg, { conn, args, usedPrefix, command }) => {
  const text = args.join(' ')
  const chatId = msg.key.remoteJid

  if (!text) {
    return conn.sendMessage(chatId, {
      text: `‚ú≥Ô∏è Ingresa tu pregunta\nEjemplo: *${usedPrefix + command}* ¬øqui√©n invent√≥ WhatsApp?`
    }, { quoted: msg })
  }

  try {
    await conn.sendMessage(chatId, { react: { text: 'üï≥Ô∏è', key: msg.key } })

    const name = msg.pushName || 'Usuario'
    const prompt = await getPrompt()
    let result = ''

    try {
      result = await openRouterQuery(text, prompt)
      result = cleanResponse(result)
    } catch (e) {
      console.error('Error OpenRouter:', e)

      try {
        result = await luminaiQuery(text, name, prompt)
      } catch (e) {
        console.error('Error LuminAI:', e)

        try {
          result = await perplexityQuery(text, prompt)
        } catch (e) {
          console.error('Error Perplexity:', e)
          throw new Error('No se obtuvo respuesta de ning√∫n servicio')
        }
      }
    }

    await conn.sendMessage(chatId, { text: result }, { quoted: msg })
    await conn.sendMessage(chatId, { react: { text: 'üí©', key: msg.key } })

  } catch (error) {
    console.error(error)
    await conn.sendMessage(chatId, {
      text: `‚ùå Error: ${error.message}`
    }, { quoted: msg })

    await conn.sendMessage(chatId, { react: { text: '‚ùå', key: msg.key } })
  }
}

async function getPrompt() {
  try {
    const res = await fetch('https://raw.githubusercontent.com/SoySapo6/MaycolAIUltraMD/refs/heads/main/src/prompt-xex.js')
    return await res.text()
  } catch {
    return 'Eres un asistente inteligente'
  }
}

function cleanResponse(text) {
  if (!text) return ''
  return text
    .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')
    .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')
    .trim()
}

async function openRouterQuery(q, prompt) {
  const keys = await obtenerKeys()

  for (const key of keys) {
    try {
      const { data } = await axios.post(apis.openrouter, {
        model: 'mistralai/mixtral-8x7b-instruct',
        messages: [
          { role: 'system', content: prompt },
          { role: 'user', content: q }
        ]
      }, {
        headers: {
          'Authorization': `Bearer ${key}`,
          'Content-Type': 'application/json'
        }
      })
      return data.choices[0].message.content
    } catch (e) {
      console.warn(`Clave fall√≥ ${key}, probando siguiente...`)
    }
  }
  throw new Error('Todas las claves de OpenRouter fallaron')
}

async function luminaiQuery(q, user, prompt) {
  const { data } = await axios.post(apis.luminai, {
    content: q,
    user: user,
    prompt: prompt,
    webSearchMode: true
  })
  return data.result
}

async function perplexityQuery(q, prompt) {
  const { data } = await axios.get(apis.perplexity, {
    params: {
      query: q,
      context: prompt
    }
  })
  return data.response
}

handler.help = ['xex <pregunta>']
handler.command = ['xex', 'ai', 'ask']
handler.tags = ['ai']
handler.register = true

export default handler
