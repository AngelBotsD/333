import axios from 'axios';      
import fetch from 'node-fetch';      

const handler = async (msg, { conn, args, usedPrefix, command }) => {
  const chatId = msg.key.remoteJid;
  const text = args.join(' ').trim();

  // Si el mensaje comienza con ".xex xex |" o ".xex china |" procesamos directo con la IA
  if (text.startsWith('xex |') || text.startsWith('china |')) {
    let [modo, ...mensajeArr] = text.split('|');
    modo = modo.trim(); // "xex" o "china"
    const mensaje = mensajeArr.join('|').trim();

    if (!mensaje) {
      return conn.sendMessage(chatId, { text: '‚ùå No escribiste el mensaje despu√©s del prefijo.' }, { quoted: msg });
    }

    const promptPrefix = modo === 'xex' ? 'Comportate como xex: ' : 'Comportate como china: ';
    const promptFinal = promptPrefix + mensaje;

    try {
      await conn.sendMessage(chatId, { react: { text: 'üï≥Ô∏è', key: msg.key } });

      const name = msg.pushName || 'Usuario';
      const promptBase = await getPrompt();

      let result = '';
      try {
        result = await luminaiQuery(promptFinal, name, promptBase);
        result = cleanResponse(result);
      } catch (e) {
        console.error('Error Luminai:', e);
        try {
          result = await perplexityQuery(promptFinal, promptBase);
        } catch (e) {
          console.error('Error Perplexity:', e);
          throw new Error('No se obtuvo respuesta de los servicios');
        }
      }

      await conn.sendMessage(chatId, { text: result }, { quoted: msg });
      await conn.sendMessage(chatId, { react: { text: '‚úÖ', key: msg.key } });
    } catch (error) {
      console.error(error);
      await conn.sendMessage(chatId, { text: `‚ùå Error: ${error.message}` }, { quoted: msg });
      await conn.sendMessage(chatId, { react: { text: '‚ùå', key: msg.key } });
    }
    return;
  }

  // Si no es un comando directo, mandamos la lista interactiva para elegir
  if (!text) {
    return conn.sendMessage(chatId, { text: `‚ú≥Ô∏è Ingresa tu mensaje despu√©s del comando\nEjemplo: ${usedPrefix + command} hola` }, { quoted: msg });
  }

  const sections = [
    {
      title: '¬øC√≥mo quieres que responda?',
      rows: [
        { title: 'XEX', rowId: `.xex xex | ${text}`, description: 'El que mas insulta üî•' },
        { title: 'China', rowId: `.xex china | ${text}`, description: 'La mas caliente üî•' }
      ]
    }
  ];

  const listMessage = {
    text: `üó£Ô∏è Elige c√≥mo quieres que responda:`,
    footer: 'By MaycolAIUltraMD',
    title: 'üåü Selecciona un personaje',
    buttonText: 'Elige una opci√≥n',
    sections
  };

  await conn.sendMessage(chatId, listMessage, { quoted: msg });
};

// Funciones auxiliares (las mismas que tienes)
async function getPrompt() {
  try {
    const res = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt');
    return await res.text();
  } catch {
    return 'Eres un asistente inteligente';
  }
}

function cleanResponse(text) {
  if (!text) return '';
  return text
    .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')
    .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')
    .trim();
}

async function luminaiQuery(q, user, prompt) {
  const { data } = await axios.post('https://luminai.my.id', {
    content: q,
    user: user,
    prompt: prompt,
    webSearchMode: true
  });
  return data.result;
}

async function perplexityQuery(q, prompt) {
  const { data } = await axios.get('https://api.perplexity.ai/chat', {
    params: {
      query: q,
      context: prompt
    }
  });
  return data.response;
}

handler.help = ['xex <mensaje>'];
handler.command = ['xex', 'ai', 'ask'];
handler.tags = ['ai'];
handler.register = true;

export default handler;
